# Generated by Django 5.1 on 2024-08-29 18:39

import django.core.validators
import django.db.models.deletion
import django_countries.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Bio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(max_length=255)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('detail_court', models.TextField(max_length=500)),
                ('detail', models.TextField()),
                ('date_modification', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Realisation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(max_length=255)),
                ('detail_short', models.CharField(max_length=255)),
                ('detail_long', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='realisations/images/')),
                ('video_short', models.FileField(blank=True, null=True, upload_to='realisations/videos/')),
                ('video_long', models.FileField(blank=True, null=True, upload_to='realisations/videos/')),
                ('date_real', models.DateField()),
                ('lieu_real', models.CharField(max_length=255)),
                ('nom_client', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=255)),
                ('detail_short', models.CharField(max_length=255)),
                ('detail_long', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='services/images/')),
                ('prix', models.DecimalField(decimal_places=2, max_digits=10)),
                ('qualite', models.CharField(max_length=50)),
                ('note_moyenne', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('noms', models.CharField(max_length=255)),
                ('sexe', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female')], max_length=1, null=True)),
                ('pays', django_countries.fields.CountryField(max_length=2)),
                ('tel', models.CharField(blank=True, max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user may belong to multiple groups. A group typically includes a set of permissions to perform specific operations.', related_name='name1', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='name2', to='auth.permission')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Commentaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contenu', models.TextField()),
                ('date_com', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('realisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='folio.realisation')),
            ],
        ),
        migrations.CreateModel(
            name='CmdService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_cmd', models.DateField(auto_now_add=True)),
                ('prix_cmd', models.DecimalField(decimal_places=2, max_digits=10)),
                ('user', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='folio.service')),
            ],
        ),
        migrations.CreateModel(
            name='Avis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.PositiveIntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('texte', models.TextField(blank=True, null=True)),
                ('date_avis', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='folio.service')),
            ],
        ),
    ]
